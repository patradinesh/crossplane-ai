name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Build for multiple platforms
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64
            ext: .exe

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
    
    - name: Get version
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Build
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        go build -ldflags "-X main.version=${{ steps.version.outputs.VERSION }}" \
          -o crossplane-ai-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.ext }} .
    
    - name: Create tarball (Unix)
      if: matrix.goos != 'windows'
      run: |
        tar -czf crossplane-ai-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz \
          crossplane-ai-${{ matrix.goos }}-${{ matrix.goarch }} \
          README.md LICENSE
    
    - name: Create zip (Windows)
      if: matrix.goos == 'windows'
      run: |
        zip crossplane-ai-${{ matrix.goos }}-${{ matrix.goarch }}.zip \
          crossplane-ai-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.ext }} \
          README.md LICENSE
    
    - name: Upload Release Asset (Unix)
      if: matrix.goos != 'windows'
      uses: actions/upload-artifact@v4
      with:
        name: crossplane-ai-${{ matrix.goos }}-${{ matrix.goarch }}
        path: crossplane-ai-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz
    
    - name: Upload Release Asset (Windows)
      if: matrix.goos == 'windows'
      uses: actions/upload-artifact@v4
      with:
        name: crossplane-ai-${{ matrix.goos }}-${{ matrix.goarch }}
        path: crossplane-ai-${{ matrix.goos }}-${{ matrix.goarch }}.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Get version
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        name: Release v${{ steps.version.outputs.VERSION }}
        draft: false
        prerelease: false
        files: |
          artifacts/*/*
        body: |
          ## Crossplane AI v${{ steps.version.outputs.VERSION }}
          
          ### Installation
          
          Download the appropriate binary for your platform and add it to your PATH.
          
          #### Linux/macOS
          ```bash
          # Download and extract
          curl -L https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.VERSION }}/crossplane-ai-linux-amd64.tar.gz | tar xz
          
          # Move to PATH
          sudo mv crossplane-ai-linux-amd64 /usr/local/bin/crossplane-ai
          ```
          
          #### Windows
          Download the `crossplane-ai-windows-amd64.zip` file and extract it.
          
          ### Usage
          ```bash
          crossplane-ai --help
          ```
          
          See the [README](https://github.com/${{ github.repository }}/blob/main/README.md) for detailed usage instructions.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
